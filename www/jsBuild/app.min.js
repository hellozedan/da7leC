(function(){
  angular.module('starter', ['ionic', 'starter.controllers', 'starter.services', 'angularMoment', 'ngCordova', 'firebase','ui.identicon'])

    .run(function($ionicPlatform, $state, ConfigurationService, UserService, EntityService,$timeout) {
      // $ionicPlatform.on('pause', function() {
      //   Firebase.goOffline();
      //
      // });
      // $ionicPlatform.on('resume', function() {
      //   Firebase.goOnline();
      //
      // });
      $ionicPlatform.ready(function() {
        if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
          setTimeout(function() {
            navigator.splashscreen.hide();
          }, 50);
          cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
          cordova.plugins.Keyboard.disableScroll(true);

        }
        if (window.StatusBar) {
          StatusBar.styleDefault();
        }
        var isNotificationClicked = false;
        if (window.cordova && typeof window.plugins.OneSignal != 'undefined' && !ConfigurationService.Notification_token()) {
          console.log('in 1')
          $timeout(function () {
            console.log('in 2')
            console.log( window.plugins.OneSignal)
            console.log( window.plugins.OneSignal.getIds)
// window.plugins.OneSignal.setLogLevel({logLevel: 4, visualLevel: 4});

            var notificationOpenedCallback = function(jsonData) {
              console.log('in 3')
              console.log('notificationOpenedCallback: ' + JSON.stringify(jsonData));
            };
            $timeout(function () {
              window.plugins.OneSignal
                .startInit("722ff6c3-d7b7-4a8e-8222-ba130b1eae7b")
                .handleNotificationOpened(notificationOpenedCallback)
                .endInit();
            },0);


            // window.plugins.OneSignal.getIds(function (ids) {
            //   console.log('in 3')
            //   UserService.RegisterNotification(ids.userId)
            //     .then(function (userToken) {
            //       console.log('in 4')
            //       ConfigurationService.SetNotification_token(userToken);
            //     }, function (err) {
            //       console.log('in 5')
            //     });
            // },function (err) {
            //   console.log('in 6')
            //   console.err(err)
            // });
          }, 0)
        }


        var user = ConfigurationService.UserDetails();
        if (user) {
          UserService.CheckUser()
            .then(function (user) {

              if(user.isNeedLogin === false){


                // var ref = new Firebase("https://mustknow.firebaseIO.com");
                //
                // ref.authWithCustomToken(user.fireToken, function (error, authData) {
                //
                //   if (error) {
                //     console.log("Login Failed!", error);
                //   } else {
                //     if(!isNotificationClicked)
                ConfigurationService.getContactList().then(function (user) {
                  $state.go("friends");
                },function(){
                  $state.go("friends");
                });

                //   }
                // });
              }
              else{
                $state.go("login");
              }
            }, function (err) {
              $state.go("login");
            });
        }else{
          $state.go("login");
        }

      });
    })
    .factory('focus', function($timeout, $window) {
      return function(id) {
        // timeout makes sure that is invoked after any other event has been triggered.
        // e.g. click events that need to run before the focus or
        // inputs elements that are in a disabled state but are enabled when those events
        // are triggered.
        $timeout(function() {
          var element = $window.document.getElementById(id);
          if(element)
            element.focus();
        });
      };
    })

    .directive('eventFocus', function(focus) {
      return function(scope, elem, attr) {
        elem.on(attr.eventFocus, function() {
          focus(attr.eventFocusId);
        });

        // Removes bound events in the element itself
        // when the scope is destroyed
        scope.$on('$destroy', function() {
          element.off(attr.eventFocus);
        });
      };
    })

    .config(function($stateProvider, $urlRouterProvider) {

      $stateProvider
        .state('tab', {
          url: '/tab',
          abstract: true,
          templateUrl: 'templates/tabs/html/tabs.html'
        })
        .state('login', {
          url: "/login",
          templateUrl: "templates/login/html/login.html",
          controller: "loginCtrl"

        })
        .state('chat', {
          url: "/chat",
          templateUrl: "templates/chat/html/chat.html",
          controller: "chatCtrl"

        })
        .state('userProfile', {
          url: "/userProfile/:userId/:first_name",
          templateUrl: "templates/profile/html/userProfile.html",
          controller: "userProfileCtrl"
        })
        .state('blockedUsers', {
          url: "/blockedUsers",
          templateUrl: "templates/blockedUsers/html/blockedUsers.html",
          controller: "blockedUsersCtrl"
        })

        // Each tab has its own nav history stack:

        .state('tab.subjects', {
          url: '/subjects',
          views: {
            'tab-subjects': {
              templateUrl: 'templates/match/html/subjects.html',
              controller: 'subjectsCtrl'
            }
          }
        })
        .state('tab.match', {
          url: "/match",
          views: {
            'tab-match': {
              templateUrl: "templates/match/html/match.html",
              controller: 'matchCtrl'
            }
          }
        })

        .state('tab.messages', {
          url: '/messages',
          views: {
            'tab-messages': {
              templateUrl: 'templates/messages/html/messages.html',
              controller: 'messagesCtrl'
            }
          }
        })
        .state('friends', {
          url: "/friends",
          templateUrl: "templates/friends/html/friends.html",
          controller: "friendsCtrl"

        })
        .state('invite', {
          url: "/invite",
          templateUrl: "templates/invite/html/invite.html",
          controller: "inviteCtrl"

        })
        // .state('tab.friends', {
        //   url: '/friends',
        //   views: {
        //     'tab-friends': {
        //       templateUrl: 'templates/friends/html/friends.html',
        //       controller: 'friendsCtrl'
        //     }
        //   }
        // })


        .state('tab.myProfile', {
          url: '/myProfile',
          views: {
            'tab-myProfile': {
              templateUrl: 'templates/profile/html/myProfile.html',
              controller: 'myProfileCtrl'
            }
          }
        });

      // if none of the above states are matched, use this as the fallback


    });
})();


var common = new function () {
  this.indexOfConv = function (arr,convId){
    for(var i=0;i<arr.length;i++)
    {
      if(arr[i].conversationId===convId)
      {
        return i;
      }
    }
    return -1;
  }
}

var appControllers = angular.module('starter.controllers', []);
var appServices = angular.module('starter.services', []);

appControllers.controller('NewMessagesCtrl', function ($scope, MessagesService) {

  $scope.checkUndreadMessage = function(){

    return MessagesService.checkUndreadMessage();
  }
});

appControllers.controller('tabsCtrl', function ($scope, MessagesService) {

  $scope.checkUndreadMessage = function(){
    return MessagesService.checkUndreadMessage();
  }
});
appControllers.controller('AppCtrl', function ($scope, $state, $ionicHistory) {

  $scope.goBack = function(){
    if($state.current.name.indexOf('chat') >= 0){
      if($ionicHistory.backView()){
        $ionicHistory.goBack();
      }else{
        $state.go('tab.messages');
      }
    }else{
      $ionicHistory.goBack();
    }

  }
});

appServices.factory('favoriteService', ['$state','$rootScope','$ionicPlatform','$ionicHistory',function($state,$ionicPlatform,$ionicHistory,$timeout){
  var favorites = [];
  return {
    getFavorites : function () {
      if (favorites.length > 0){
        return favorites;
      }
      else {
        favorites =  angular.fromJson(window.localStorage['favorites']) || [];
        return favorites;
      }
    },
    addToFavorites : function (fav) {
      favorites.push(fav);
      window.localStorage['favorites'] = angular.toJson(favorites);
    }
  };
/*  $scope.addToFavorites = function () {
    var fav = {
      subject: $scope.subject.id
    };
    window.localStorage['favorites'] = angular.toJson(fav);
  };*/
}]);

appServices.factory('backcallFactory', ['$state','$rootScope','$ionicPlatform','$ionicHistory','$timeout',function($state,$rootScope,$ionicPlatform,$ionicHistory,$timeout){
  var obj={};
  obj.backCall=function(){
    var backbutton=0;
    $ionicPlatform.registerBackButtonAction(function () {
      if ($state.current.name === 'tab.subjects' || $state.current.name === 'tab.addSubject-s1' || $state.current.name === 'tab.messages' || $state.current.name === 'tab.myProfile' || $state.current.name === 'login') {
        if(backbutton==0){
          backbutton++;
          window.plugins.toast.showShortBottom('press back button again to exit.');
          $timeout(function(){backbutton=0;},3000);
        }else{
          navigator.app.exitApp();
        }
      }
      else if($state.current.name.indexOf('chat') >= 0){
        $state.go('tab.messages');
      }
      else if ($ionicHistory.viewHistory().backView != null){
        $ionicHistory.goBack();
      }
      else if($rootScope.TabName){
        $state.go($rootScope.TabName);
        $ionicHistory.clearHistory();
        $ionicHistory.clearCache();
      }else{
        $state.go('tab.subjects');
      }
    }, 100);//registerBackButton
  }//backcallfun
  return obj;
}]);




(function () {

appServices.factory('ChatService', function($q, $timeout,SubjectService, $rootScope, $ionicScrollDelegate, $firebaseObject, $firebaseArray, ConfigurationService, NotificationService,$http, UserService){
  var allmessages = [];
  var userDetails = ConfigurationService.UserDetails();
  var userName = userDetails.first_name + " " + userDetails.last_name;
  var conversaionId;
  var myConversaionId;
  var createrId;
  var subjectId;
  var createrId;
  var myUrl;
  var otherUrl;
  var conversationUserRef;
  var conversationOterUserRef;
  var hanleMyMessageRead;
  var hanleOtherMessageRead;
  var isUserBlocked = false;
  var privecy;
  var scrollBottom = function(){
    //$timeout(function(){
    //  $('.chats').parent().scrollTop( $('.chats').parent()[0].scrollHeight);
    //},0)
    $ionicScrollDelegate.scrollBottom(false);

  };

  return {
    getMessages: function() {
      return allmessages;
    },
    setMessages: function(conversaion){
      conversaionId = conversaion;
      createrId = conversaionId.split("-")[0];
      subjectId = conversaionId.split("-")[1];
      myConversaionId = userDetails._id + '-' + subjectId;
      otherUrl = "https://mustknow.firebaseIO.com/chats/" + createrId + "/" + myConversaionId;
      myUrl = "https://mustknow.firebaseIO.com/chats/" + userDetails._id  + "/" + conversaionId;
      conversationUserRef = new Firebase('https://mustknow.firebaseIO.com/conversationOnline/' + userDetails._id);
      conversationOterUserRef = new Firebase('https://mustknow.firebaseIO.com/conversationOnline/' + createrId);

      hanleOtherMessageRead = new Firebase(otherUrl + "/read");
      hanleMyMessageRead = new Firebase(myUrl + "/read");
      hanleMyMessageRead.set(true);
      conversationUserRef.set({
        conversationId: conversaion,

      });
      var blockedUrl = "https://mustknow.firebaseIO.com/chats/" + createrId + "/blocked/" + userDetails._id;
      var blockedRef = new Firebase(blockedUrl);

      blockedRef.on("value", function (userSnapshot) {
        if (userSnapshot.val()) {
          isUserBlocked = true;
        }else{
          isUserBlocked = false;
        }
      });


      var isUserOnlineRef = new Firebase('https://mustknow.firebaseIO.com/presence/' + createrId);
      isUserOnlineRef.on("value", function (userSnapshot) {
        if (userSnapshot.val() && userSnapshot.val() == 'online') {
          $rootScope.$broadcast('sendUserOnlineEvent', true);
        }
        else{
          $rootScope.$broadcast('sendUserOnlineEvent', false);
        }
      });

      var firebaseRef = new Firebase('https://mustknow.firebaseIO.com/chats/' + userDetails._id + '/' + conversaionId);
      var firebaseRef2 = new Firebase('https://mustknow.firebaseIO.com/chats/' + userDetails._id + '/' + conversaionId +"/messages");
      var a = $firebaseArray(firebaseRef2);
      a.$loaded(function(h){
        allmessages = h;

        $rootScope.$broadcast('sendChatEvent', 'sendChatEvent');
      })

      firebaseRef.on('value', function(dataSnapshot) {

        privecy = false;
        var messages = [];
        messages =  dataSnapshot.val().messages;


        var counter = 0;
        var myMessages = 0;
        var otherMessages = 0;

        angular.forEach(messages, function(value, key) {
          if(counter == 3 && counter == myMessages){
            privecy = true;
          }
          if(counter == 4 && messages[key].sender != userDetails._id){
            privecy = false;
          }
          if(messages[key].sender == userDetails._id){
            myMessages ++;
          }else{
            otherMessages++
          }
          counter++;

          if(otherMessages >= 2 && myMessages >= 2){
            if(!dataSnapshot.val().userName) {
              debugger
              var senderUser = dataSnapshot.key().split('-')[0];
              UserService.GetUser(senderUser).then(function(user){

                firebaseRef.child("userName").set(
                  user.first_name + " " + user.last_name
                );
                firebaseRef.child("fbPhotoUrl").set(
                  user.fbPhotoUrl
                );
              },function(err){

              })
            }
          }


        });



        //$rootScope.$broadcast('sendChatEvent', 'sendChatEvent');

        scrollBottom();

      });
    },
    blockUser:function (chatDetails) {
      createrId = conversaionId.split("-")[0];
      var blockedUserRef=new Firebase("https://mustknow.firebaseIO.com/chats/" + userDetails._id+"/blocked/"+createrId);
      var blockedUser = blockedUserRef.set({
        userName: chatDetails.userName,
        fbPhotoUrl: chatDetails.fbPhotoUrl,
        userId:createrId
      });
    },
    sendMessage: function(msg, chatDetails){
      if(privecy){
        ConfigurationService.showAlert();
        return;
      }


      var myRef, otherRef;
      var isFirstMessage = false;
      myConversaionId = userDetails._id + '-' + subjectId;

      if(!allmessages || allmessages.length == 0){
        isFirstMessage = true;
      }

      if(isFirstMessage){
        SubjectService.Interested(subjectId).then(function (result) {
        }, function (err) {
        });
        otherRef = new Firebase(otherUrl);
        myRef = new Firebase(myUrl);
        var otherToSend = {
          userName: userName,
          subjectName: chatDetails.subjectName,
          fbPhotoUrl: userDetails.fbPhotoUrl,
          desc:chatDetails.desc
        }

        myRef.set({
          userName: chatDetails.userName,
          subjectName: chatDetails.subjectName,
          fbPhotoUrl: chatDetails.fbPhotoUrl,
          read: true,
          desc:chatDetails.desc
        });

        if(isUserBlocked){
          otherToSend.read = true;
        }

        otherRef.set(otherToSend);
        isFirstMessage = false;
      }
      otherRef = new Firebase(otherUrl + "/messages");
      myRef = new Firebase(myUrl + "/messages");
      var newMessageOtherUrl = otherRef.push();
      var newMessageRef2 = myRef.push();
      var date = new Date();
      var msgTosend = {
        body: msg,
        sender: userDetails._id,
        create_date: date.toJSON(),
        date_string: date.toLocaleDateString()
      }

      newMessageRef2.set(msgTosend);
      if(!isUserBlocked){
        newMessageOtherUrl.set(msgTosend);

        var didUserRead = $firebaseObject(conversationOterUserRef);
        didUserRead.$loaded(function(value){
          if(!value){
            hanleOtherMessageRead.set(false);
          }else if (value.conversationId !== myConversaionId){
            hanleOtherMessageRead.set(false);
          }
          else{
            hanleOtherMessageRead.set(true);
          }
        })
        var userRef = new Firebase('https://mustknow.firebaseIO.com/presence/' + createrId);
        var isOtherUserOnline = $firebaseObject(userRef);
        isOtherUserOnline.$loaded(function(value){
          if(value && value.$value == 'offline'){
            var message = {
              user: createrId,
              message: msg,
              conversationId: myConversaionId,
              userName: userName,
              subjectName: chatDetails.subjectName,
              fbPhotoUrl: userDetails.fbPhotoUrl,
              desc:chatDetails.desc
            }
            NotificationService.SendMessage(message)
              .then(function (message) {

              }, function (err) {
              });
          }
        })
      }
    },
    ReportUser: function (report) {
      var deferred = $q.defer();
      $http.post(ConfigurationService.ServerUrl() + '/api/users/report',report, {
        headers: {
          "access-token": ConfigurationService.UserDetails().token
        }
      }).success(function (data) {
        deferred.resolve(data);
      }).error(function (msg, code) {
        deferred.reject(msg);
        //   $log.error(msg, code);
      });
      return deferred.promise;
    },
    scrollBottom: scrollBottom
  }
})
})();

(function () {
  appServices.factory('ConfigurationService', function ($ionicPopup, $q, $cordovaContacts) {
    var contactsList = {data: ''};
    var contactObject = {data: ''};
    return {
      ServerUrl: function () {
        return "https://da7le.herokuapp.com";
        // return "http://localhost:3000";
        // return "http://192.168.1.21:3000";
      },
      FireBaseUrl: function () {
        return "https://mustknow.firebaseIO.com";
      },
      UserDetails: function () {
        if (!this.userDetails) {
          if (window.localStorage['user']) {
            this.userDetails = angular.fromJson(window.localStorage['user']);
          }
        }
        return this.userDetails;
      },
      RefreshUserDetails: function () {
        if (window.localStorage['user']) {
          this.userDetails = angular.fromJson(window.localStorage['user']);
        }
        return this.userDetails;
      },

      Notification_token: function () {
        if (!this.notification_token) {
          if (window.localStorage['notification_token']) {
            this.notification_token = window.localStorage['notification_token']
          }
        }
        return this.notification_token;
      },
      MyFilter: function () {
        if (!this.myFilter) {
          if (window.localStorage['myFilter']) {
            this.myFilter = angular.fromJson(window.localStorage['myFilter'])
          }
        }
        var temp = {};
        angular.copy(this.myFilter, temp);
        return temp;
      },
      SetMyFilter: function (myFilter) {
        if (myFilter) {
          window.localStorage['myFilter'] = angular.toJson(myFilter);
          this.myFilter = myFilter;
        }
      },
      SetNotification_token: function (notification_token) {
        if (notification_token) {
          window.localStorage['notification_token'] = angular.toJson(notification_token);
          this.notification_token = notification_token;
        }
      },
      showAlert: function () {
        var alertPopup = $ionicPopup.alert({
          title: 'info',
          template: 'wiat for the other user to answer you'
        });
        alertPopup.then(function (res) {
          console.log('Thank you for not eating my delicious ice cream cone');
        });
      },
      LogOut: function () {
        delete this.notification_token;
        delete this.myFilter;
        delete this.userDetails;
      }
      ,
      getContacts: function () {
        var deferred = $q.defer();
        if (!window.cordova) {
          var contacts = [{ phoneNumbers:[{value:"0528865996"}],displayName:'love'}
            ,{ phoneNumbers:[{value:"052886www5996"}],displayName:'www'},{ phoneNumbers:[{value:"0544282120"}],displayName:'hhhhh'}];
          contactsList.data= [];
          contactObject.data={};
          contacts.forEach(function (element) {
            if (element.displayName && element.displayName !== "" && element.phoneNumbers && element.phoneNumbers.length > 0) {
              contactsList.data.push({phoneNumber: element.phoneNumbers[0].value, name: element.displayName})
              contactObject.data[element.phoneNumbers[0].value] = {
                phoneNumber: element.phoneNumbers[0].value,
                name: element.displayName
              };
            }
          });
          deferred.resolve();
        }
        else {
          $cordovaContacts.find({}).then(function (allContacts) { //omitting parameter to .find() causes all contacts to be returned
            console.log(allContacts.length)
            console.log(angular.toJson(allContacts[0]), angular.toJson(allContacts[1]))
            contactsList.data= [];
            contactObject.data={};
            allContacts.forEach(function (element) {
              if (element.displayName && element.displayName !== "" && element.phoneNumbers && element.phoneNumbers.length > 0) {
                contactsList.data.push({phoneNumber: element.phoneNumbers[0].value, name: element.displayName})
                contactObject.data[element.phoneNumbers[0].value] = {
                  phoneNumber: element.phoneNumbers[0].value,
                  name: element.displayName
                };
              }
            });
            deferred.resolve();
            // $scope.contacts = allContacts;
          });
        }
        return deferred.promise;
      },

      getContactList: function () {
        var deferred = $q.defer();
        if (contactsList.data !== '') {
          deferred.resolve(contactsList.data);
        }
        else {
          this.getContacts().then(function (data) {
            deferred.resolve(contactsList.data);
          }, function (err) {
            deferred.reject('err')
          })
        }
        return deferred.promise;
      } ,
      getContactObject: function () {
        var deferred = $q.defer();
        if (contactsList.data !== '') {
          deferred.resolve(contactObject.data);
        }
        else {
          this.getContacts().then(function (contactList) {
            deferred.resolve(contactObject.data);
          }, function (err) {
            deferred.reject('err')
          })
        }
        return deferred.promise;
      }
    }
  });
})();

(function () {
  appServices.factory('EntityService', function (ConfigurationService, $q) {
    var otherProfile = null;
    var messageToDeal = null;
    var deleteFromArray = function (array, item) {
      for (var i = 0; i < array.length; i++) {
        if (array[i]._id == item._id) {
          array.splice(i, 1);
        }
      }
    };
    var setProfile = function (user) {
      otherProfile = user;
    }

    var getOtherProfile = function () {
      return otherProfile;
    }

    var setMessageDetails = function (message) {
      messageToDeal = message;
    }

    var getMessageDetails = function () {
      return messageToDeal;
    }

    return {
      deleteFromArray: deleteFromArray,
      setProfile: setProfile,
      getOtherProfile: getOtherProfile,
      setMessageDetails: setMessageDetails,
      getMessageDetails: getMessageDetails
    };
  });
})();

// (function () {
//   appServices.factory('Socket', function (socketFactory) {
//     var myIoSocket = io.connect('http://chat.socket.io:80');
//     mySocket = socketFactory({
//       ioSocket: myIoSocket
//     });
//     return mySocket;
//   })
// })()

(function(){
  appServices.factory('MatchService', function ($http, $q, ConfigurationService) {
    return {
      Match: function (match) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/users/match',
          match,
          {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);

        });


        return deferred.promise;
      },
      SendMessageToMatcher: function (matchDetails){
        angular.forEach(matchDetails.otherPersons, function(value, key){

          var conversaionId = value._id + "-" + matchDetails.match_id;
          var firebaseMainRef = new Firebase(ConfigurationService.FireBaseUrl() + '/chats/' + matchDetails.mainPerson._id + '/' + conversaionId + "/messages");
          var date = new Date();
          var msg = "hello";
          var msgTosend = {
            body: msg,
            sender: value._id,
            create_date: date.toJSON(),
            date_string: date.toLocaleDateString()
          }
          var refToPush = firebaseMainRef.push();
          refToPush.set(msgTosend);

          conversaionId = matchDetails.mainPerson._id + "-"  + matchDetails.match_id;
          firebaseMainRef = new Firebase(ConfigurationService.FireBaseUrl() + '/chats/' + value._id + '/' + conversaionId + "/messages");
          msgTosend.sender = matchDetails.mainPerson._id;
          refToPush = firebaseMainRef.push();
          refToPush.set(msgTosend);
          console.log(value);
        });
      }

    }
  })
})();


(function () {
  appServices.factory('MessagesService', function ($rootScope, $ionicScrollDelegate, $firebaseObject, ConfigurationService) {
    var messages = [];
    var userDetails = ConfigurationService.UserDetails();

    var fillMessages = function () {

      if(!userDetails)
        return;
      var ref = new Firebase(ConfigurationService.FireBaseUrl() + "/chats/" + userDetails._id);
      ref.orderByValue().on("value", function (snapshot) {
        messages = [];
        angular.forEach(snapshot.val(), function (value, key) {

          var conversationId = key;

          if (value.messages) {
            var messagesArray = Object.getOwnPropertyNames(value.messages);
            var lastMessageKey = messagesArray[messagesArray.length - 1];
            var lastMessage = value.messages[lastMessageKey].body;
            var createrId = conversationId.split("-")[0];

            var readMessage = false;
            if (value.read) {
              readMessage = value.read;
            }


            var indexx = common.indexOfConv(messages, conversationId);
            var msg = {
              conversationId: conversationId,
              lastMessage: lastMessage,
              lastMessageKey: lastMessageKey,
              subjectName: value.subjectName,
              fbPhotoUrl: value.fbPhotoUrl,
              userName: value.userName,
              readMessage: readMessage,
              desc:value.desc

            }

            if (indexx === -1) {
              messages.push(msg);
            }
            else {
              messages[indexx] = msg;

            }
            var userRef = new Firebase(ConfigurationService.FireBaseUrl() + '/presence/' + createrId);
            userRef.on("value", function (userSnapshot) {
              var online = true;
              if (userSnapshot.val() == 'offline') {
                online = false;

              }
              var blockedUrl = ConfigurationService.FireBaseUrl() + "/chats/" + createrId + "/blocked/" + userDetails._id;
              var blockedRef = new Firebase(blockedUrl);
              var blockUser = $firebaseObject(blockedRef);
              blockUser.$loaded(function (value) {
                if (value.userId) {
                  online = false;
                }
                var indexx = common.indexOfConv(messages, conversationId);

                messages[indexx].online = online
                $rootScope.$broadcast('sendMessagesEvent', 'sendMessagesEvent');
              })


            });
          }

        });
      });
    }
    fillMessages();
    return {
      getMessages: function () {
        return messages;
      },
      setMessages: function () {
        fillMessages();
      },
      checkUndreadMessage: function () {
        for (var i = 0; i < messages.length; i++) {
          if (messages[i].readMessage === false) {
            return true;
          }
        }
        return false;
      }
    }
  })
})();

(function () {
appServices.factory('NotificationService', function ($http, $log, $q, ConfigurationService) {
  return {

    SendMessage: function (message) {
      var deferred = $q.defer();
      $http.post(ConfigurationService.ServerUrl() + '/api/notification',
        message
        , {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
      return deferred.promise;
    }
  }
})
})();

(function(){
  appServices.factory('SubjectService', function ($http, $log, $q, ConfigurationService, $cordovaGeolocation) {
    return {
      TimeToUpdateFromServer:1000*60*15,
      GetCategories: function () {
        var deferred = $q.defer();
        if((!ConfigurationService.categories)||(ConfigurationService.categories.datetime&&((new Date()).getTime()-ConfigurationService.categories.datetime.getTime())>this.TimeToUpdateFromServer)) {
          $http.get(ConfigurationService.ServerUrl() + '/api/subjects/categories', {
            headers: {
              "access-token": ConfigurationService.UserDetails().token
            }
          }).success(function (data) {
            ConfigurationService.categories = {
              data: data,
              datetime: new Date()
            }
            deferred.resolve(data);
          }).error(function (msg, code) {
            deferred.reject(msg);
            //   $log.error(msg, code);
          });
        }
        else
        {
          deferred.resolve(ConfigurationService.categories.data);

        }
        return deferred.promise;
      },
      GetSubjects: function (userSubjects,scrollOptions, userId) {
        var deferred = $q.defer();
        if (userId == undefined) {
          userId = null;
        }
        var myFilter = ConfigurationService.MyFilter();
        myFilter.limit = scrollOptions.limit;
        myFilter.skip = scrollOptions.skip;
        if (!myFilter.gender) {
          myFilter = {
            nearMe: false,
            gender: 'both',
            categories: []
          }
          ConfigurationService.SetMyFilter(myFilter);
        }
        if (myFilter.nearMe) {
          var posOptions = {timeout: 10000, enableHighAccuracy: false};
          $cordovaGeolocation
            .getCurrentPosition(posOptions)
            .then(function (position) {
              var lat = position.coords.latitude;
              var long = position.coords.longitude;
              myFilter.locationCoords = [lat, long];
              tryPost();
            }, function (err) {
              myFilter.locationCoords = [];
              tryPost();
              // error
            });
        }
        else {
          myFilter.locationCoords = [];
          tryPost();
        }
        // myFilter.categories = Object.keys(myFilter.categories);
        function tryPost() {
          $http.post(ConfigurationService.ServerUrl() + '/api/subjects/filter?userSubjects=' + userSubjects + '&userId=' + userId, myFilter, {
            headers: {
              "access-token": ConfigurationService.UserDetails().token
            }
          }).success(function (data) {
            deferred.resolve(data);
          }).error(function (msg, code) {
            deferred.reject(msg);
            //   $log.error(msg, code);
          });
        }

        return deferred.promise;
      },
      GetMySubjects: function (userId, status) {
        var deferred = $q.defer();
        if (userId == undefined) {
          userId = null;
        }
        tryPost();
        function tryPost() {
          $http.post(ConfigurationService.ServerUrl() + '/api/subjects/filter?userSubjects=true&status='+status + '&userId=' + userId, {}, {
            headers: {
              "access-token": ConfigurationService.UserDetails().token
            }
          }).success(function (data) {
            deferred.resolve(data);
          }).error(function (msg, code) {
            deferred.reject(msg);
            //   $log.error(msg, code);
          });
        }

        return deferred.promise;
      },
      Interested: function (subjectId) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/subjects/interested', {subjectId:subjectId}, {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });


        return deferred.promise;
      },
      ChangeStatus: function (subject,status) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/subjects/status', {
          _id: subject._id,
          status: status
        }, {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });


        return deferred.promise;
      },
      CreateSubject: function (subject) {
        var deferred = $q.defer();
        var posOptions = {timeout: 10000, enableHighAccuracy: false};
        $cordovaGeolocation
          .getCurrentPosition(posOptions)
          .then(function (position) {
            var lat = position.coords.latitude;
            var long = position.coords.longitude;
            subject.locationCoords = [lat, long];
            tryPost();
          }, function (err) {
            subject.locationCoords = [];
            tryPost();
            // error
          });
        function tryPost() {

          $http.post(ConfigurationService.ServerUrl() + '/api/subjects',
            subject
            , {
              headers: {
                "access-token": ConfigurationService.UserDetails().token
              }
            }).success(function (data) {
            deferred.resolve(data);
          }).error(function (msg, code) {
            deferred.reject(msg);
            //   $log.error(msg, code);
          });
        }

        return deferred.promise;
      },
      DeleteSubjects: function (subject) {
        var deferred = $q.defer();
        $http.delete(ConfigurationService.ServerUrl() + '/api/subjects?_id=' + subject._id, {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      UpdateSubject: function (subject) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/subjects',subject, {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      }
    }
  })
})();


(function () {
  appServices.factory('UserService', function ($http, $log, $q, $cordovaFacebook, ConfigurationService) {
    var userProfile = {};
    return {
      AuthPhone: function(phoneNumber){
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/users',
          {phone_number: phoneNumber}
          , {
            headers: {
              "Content-Type": "application/json"
            }
          }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
        });
        return deferred.promise;
      },
      AuthConfirm: function(confirm){
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/users/confirm',
          confirm
          , {
            headers: {
              "Content-Type": "application/json",
              "access-token": ConfigurationService.UserDetails().token
            }
          }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
        });
        return deferred.promise;
      },
      AuthFbLogin: function (fb) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/users/facebookLogin',
          fb
          , {
            headers: {
              "Content-Type": "application/json",
              "access-token": ConfigurationService.UserDetails().token
            }
          }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      LogOut: function () {
        var deferred = $q.defer();

        $http.get(ConfigurationService.ServerUrl() + '/api/users/logOut', {
          headers: {
            "Content-Type": "application/json",
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      GetUser: function (userId) {
        var deferred = $q.defer();
        $http.get(ConfigurationService.ServerUrl() + '/api/users/' + userId, {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      CheckUser: function (userId) {
        var deferred = $q.defer();
        $http.get(ConfigurationService.ServerUrl() + '/api/users', {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      GetFriends: function () {
        var deferred = $q.defer();
        $http.get(ConfigurationService.ServerUrl() + '/api/users/getFriends', {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      Invite: function (users) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/users/invite',
          users,
          {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      FBlogin: function () {
        var deferred = $q.defer();
        $cordovaFacebook.login(["public_profile", "email", "user_friends", "user_birthday"]).then(
          function success(result) {
            deferred.resolve(result);
          },
          function error(reason) {
            alert(JSON.stringify(reason))
            deferred.reject(reason);
          }
        );
        return deferred.promise;
      },
      RegisterNotification: function (token) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/users/notification',
          {
            "notification_token": token
          },
          {
            headers: {
              "access-token": ConfigurationService.UserDetails().token
            }
          }
        ).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      SetUserProfile: function (message) {
        var createrId = message.conversationId.split("-")[0];
        userProfile.userId = createrId;
        userProfile.first_name = message.userName;

        userProfile.fbPhotoUrl = message.fbPhotoUrl;
      },
      GetUserProfile: function () {
        return userProfile;
      }
    }
  });
})();

(function () {
  appControllers.controller('blockedUsersCtrl', function ($scope, $rootScope,$state,$ionicPopup, $stateParams, $filter,$firebaseArray, $mdBottomSheet, $mdDialog, $mdToast, $ionicHistory,SubjectService,ConfigurationService,Firebase) {
    $scope.isExpanded = true;
    $rootScope.isHeaderExpanded = true;
    $scope.showConfirm = function(blockedUser) {
      var confirmPopup = $ionicPopup.confirm({
        title: 'Unblock User',
        template: 'Are you sure you want to remove'+ blockedUser.userName+' from your blocked users?'
      });
      confirmPopup.then(function(res) {
        if(res) {
          var blockedUserRef=new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id+"/blocked/"+blockedUser.userId);
          blockedUserRef.remove();
          console.log('You are sure');
        } else {
          console.log('You are not sure');
        }
      });
    };
    $scope.userDetails = ConfigurationService.UserDetails();
    // initialForm is the first activity in the controller.
    // It will initial all variable data and let the function works when page load.
    $scope.initialForm = function () {
      var blockedUsersRef=new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id+"/blocked/");
      $scope.blockedUsers=$firebaseArray(blockedUsersRef);
    };// End initialForm.
    $scope.initialForm();
  });
})();// End of Notes Detail Page  Controller.



(function () {
  appControllers.controller('chatCtrl', function ($scope, $ionicPopover, $timeout,$ionicScrollDelegate, $rootScope, $state,$ionicPopup, ConfigurationService, ChatService, UserService, EntityService) {
  var date = new Date();
  $scope.dateString = date.toLocaleDateString();
  $scope.isExpanded = true;
  $rootScope.isHeaderExpanded = true;
  $scope.chatDetails = EntityService.getMessageDetails();
  $scope.conversationId = $scope.chatDetails.conversationId;
  $scope.messages = [];
  var createrId =  $scope.conversationId.split("-")[0];

$scope.bb=function () {

  console.log(666);
}
  $scope.userDetails = ConfigurationService.UserDetails();
  ChatService.setMessages($scope.conversationId);
  $scope.messages = ChatService.getMessages();

  $timeout(function(){
    ChatService.scrollBottom();
  },100)

  window.addEventListener('native.keyboardshow', function(){
    $timeout(function(){
      $ionicScrollDelegate.scrollBottom(false);
    },300)

  });

  $rootScope.$on('sendChatEvent', function(event, mass) {
    $scope.messages = ChatService.getMessages();
    date = new Date();
    $scope.dateString = date.toLocaleDateString();
    if(!$scope.$$phase) {
      $scope.$apply();
    }
  });

    var myblockedUrl = "https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id  + "/blocked/" + createrId;
    var myblockedRef = new Firebase(myblockedUrl);
    myblockedRef.on("value", function (userSnapshot) {
      if (userSnapshot.val()) {
        $scope.disableSend = true;
        $scope.sendInputPlaceHolder = "this user is blocked";
      }
      else{
        $scope.disableSend = false;
        $scope.sendInputPlaceHolder = "Message";
      }
    });
  // $rootScope.$on('otherUserBlock', function(event, mass) {
  //   $timeout(function(){
  //     if(mass){
  //       $scope.sendInputPlaceHolder = "this user is blocked"
  //     }
  //     $scope.disableSend = mass;
  //     $scope.$apply(function(){
  //       console.log("ss")
  //     });
  //   },3000)
  //
  //
  // });
  $scope.blockUser = function () {
    var confirmPopup = $ionicPopup.confirm({
      title: 'Block User',
      template: 'Are you sure you want to block '+ $scope.chatDetails.userName+' ?',
      buttons: [
        { text: 'Cancel' },
        {
          text: '<b>Block</b>',
          type: 'button-positive',
          onTap: function(e) {
            return "sss";
          }
        }
      ]
    });
    confirmPopup.then(function(res) {
      if(res) {
        ChatService.blockUser($scope.chatDetails);
        $state.go("tab.messages");
        $scope.popover.remove();
        console.log('You are sure');
      } else {
        console.log('You are not sure');
      }
    });

  }

  $scope.reportUser=function () {
    $scope.data={is_toBlocked:true,reason:""};
    var confirmPopup = $ionicPopup.show({
      title: 'Report User',
      template: '<textarea cols="4" ng-model="data.reason" placeholder="Give us more details"></textarea>  <ion-checkbox ng-model="data.is_toBlocked" >Also block this user ? </ion-checkbox>',
      scope: $scope,
      buttons: [
        { text: 'Cancel' },
        {
          text: '<b>Report</b>',
          type: 'button-positive',
          onTap: function(e) {
            return {is_toBlocked:$scope.data.is_toBlocked,report:{user:$scope.chatDetails.conversationId.split('-')[1],reason:$scope.data.reason}};
          }
        }
      ]
    });
    confirmPopup.then(function(res) {
      if(res) {
        ChatService.ReportUser(res.report);
        if(res.is_toBlocked)
        {
          ChatService.blockUser($scope.chatDetails);
        }
        $state.go("tab.messages");
        $scope.popover.remove();
        console.log('You are sure');
      } else {
        console.log('You are not sure');
      }
    });

    //ChatService.blockUser($scope.chatDetails);
  }
  $scope.$on('$stateChangeStart',
    function(event, toState, toParams, fromState, fromParams, options){
      conversationUserRef = new Firebase('https://mustknow.firebaseIO.com/conversationOnline/' + $scope.userDetails._id);
      conversationUserRef.remove();
    })

  $scope.messageIsMine = function(userId){
    return $scope.userDetails._id === userId;
  };

  $scope.getBubbleClass = function(userId){
    var classname = 'from-them';
    if($scope.messageIsMine(userId)){
      classname = 'from-me';
    }
    return classname;
  };
  $scope.goToUserProfile = function () {
    UserService.SetUserProfile($scope.chatDetails);
    $state.go('app.userProfile',{userId:createrId })

  }

  $scope.sendMessage = function (msg) {
    date = new Date();
    $scope.dateString = date.toLocaleDateString();

    ChatService.sendMessage(msg, $scope.chatDetails);

    $scope.data.message = "";
  }
    $ionicPopover.fromTemplateUrl('templates/shared/drop-down-menu.html', {
      scope: $scope,
    }).then(function(popover) {
      $scope.popover = popover;
    });



});
appControllers.controller('OnlineUserCtrl', function ($scope,$firebaseObject, ConfigurationService, EntityService) {
  var userDetails = ConfigurationService.UserDetails();
  var chatDetails = EntityService.getMessageDetails();
  var conversationId = chatDetails.conversationId;
  var createrId = conversationId.split("-")[0];
  var isUserOnlineRef = new Firebase('https://mustknow.firebaseIO.com/presence/' + createrId);
  var blockedUrl = "https://mustknow.firebaseIO.com/chats/" + createrId + "/blocked/" + userDetails._id;
  var blockedRef = new Firebase(blockedUrl);
  var blockUser = $firebaseObject(blockedRef);
  blockUser.$loaded(function(value){
    if(value.userId){
      $scope.isUserOnline = false;
    }
    else{
      isUserOnlineRef.on("value", function (userSnapshot) {
        if (userSnapshot.val() && userSnapshot.val() == 'online') {
          $scope.isUserOnline = true;
        }
        else{
          $scope.isUserOnline = false;
        }
      });
    }
  })

})
})();

(function () {
  appControllers.controller('friendsCtrl', function ($scope, $rootScope, $state, $stateParams, $timeout, $firebaseArray, ConfigurationService, MessagesService, UserService, EntityService, $cordovaContacts, $cordovaSms) {
    $scope.friends = [];
    $scope.contactObject = {};
    if (window.cordova && typeof window.plugins.OneSignal != 'undefined' && !ConfigurationService.Notification_token()) {
      console.log('in 1')
      $timeout(function () {
        console.log('in 2')
        console.log( window.plugins.OneSignal)
        console.log( window.plugins.OneSignal.getIds)
// window.plugins.OneSignal.setLogLevel({logLevel: 4, visualLevel: 4});

        var notificationOpenedCallback = function(jsonData) {
          console.log('in 3')
          console.log('notificationOpenedCallback: ' + JSON.stringify(jsonData));
        };
$timeout(function () {
  window.plugins.OneSignal
    .startInit("722ff6c3-d7b7-4a8e-8222-ba130b1eae7b")
    .handleNotificationOpened(notificationOpenedCallback)
    .endInit();
},0);


        // window.plugins.OneSignal.getIds(function (ids) {
        //   console.log('in 3')
        //   UserService.RegisterNotification(ids.userId)
        //     .then(function (userToken) {
        //       console.log('in 4')
        //       ConfigurationService.SetNotification_token(userToken);
        //     }, function (err) {
        //       console.log('in 5')
        //     });
        // },function (err) {
        //   console.log('in 6')
        //   console.err(err)
        // });
      }, 0)
    }
    UserService.GetFriends().then(function (friends) {
        ConfigurationService.getContactObject().then(function (contactObject) {
          $scope.contactObject = contactObject;
        }, function () {

        });
        $scope.friends = friends;
      },
      function (err) {
      }
    )
    $scope.invite = function () {
      $state.go('invite');
    }
    $scope.sendDahle = function (friend) {
      console.log('dahle!');
    }
  });

})();


(function () {
  appControllers.controller('inviteCtrl', function ($scope, $rootScope, $state, $stateParams, $timeout, $firebaseArray, ConfigurationService, MessagesService, UserService, EntityService, $cordovaContacts, $cordovaSms) {
    ConfigurationService.getContactList().then(function (contacts) {
      $scope.contacts = contacts;

    }, function (err) {

    })

var contactsObject={}
    $scope.selectContact=function (contact) {
      if(contactsObject[contact.phoneNumber])
      {
        delete contactsObject[contact.phoneNumber];
      }
      else {
        contactsObject[contact.phoneNumber]=contact;
      }
    }
    $scope.sms = {};

    var options = {
      replaceLineBreaks: false, // true to replace \n by a new line, false by default
      android: {
        intent: 'INTENT'  // send SMS with the default SMS app
        //intent: ''        // send SMS without open any other app
      }
    }
    $scope.sendSms = function ( ) {


      $cordovaSms
        .send($scope.sms.number, $scope.sms.message, options)
        .then(function () {
          // Success! SMS was sent
          console.log('Success');
        }, function (error) {
          // An error occurred
          console.log(error);
        });//then
    }

    $scope.selectThisPerson = function (contact) {
      contact.isSelected=!(contact.isSelected);
    }

    $scope.selectPerson = function () {
      if (window.cordova) {
        $cordovaContacts.pickContact().then(function (contact) {
          $scope.selectedPerson = contact;

        });
      } else {
        // if (person == 'mainPerson') {
        var contact = {
          displayName: "obaida abo elhija",
          name: {
            familyName: "abo elhija",
            givenName: "obaida"
          },
          phoneNumbers: [
            {
              id: "1234",
              value: "052-886-9555"
            }
          ]
        };
        $scope.selectedPerson = contact;

        // } else {
        //   var contact = {
        //     displayName: "ahmed zedany",
        //     name: {
        //       familyName: "abo zedany",
        //       givenName: "ahmed"
        //     },
        //     phoneNumbers: [
        //       {
        //         id: "1234",
        //         value: "052-111-1111"
        //       }
        //     ]
        //   }
        // }
        //if (!$scope.$$phase) $scope.$apply()
      }

    }
    // $scope.$on('sendMessagesEvent', function(event, mass) {
    //   $scope.messages = MessagesService.getMessages();
    //   if(!$scope.$$phase) {
    //     $scope.$apply();
    //   }
    // });
    // MessagesService.setMessages();
    // $scope.goToChat = function (message) {
    //   var messageDetails = {
    //     conversationId: message.conversationId,
    //     fbPhotoUrl: message.fbPhotoUrl,
    //     userName: message.userName,
    //     subjectName: message.subjectName,
    //     desc:message.desc
    //   }
    //   EntityService.setMessageDetails(messageDetails);
    //   $state.go('chat', {conversationId: message.conversationId})
    // }
    //
    $scope.sendBtn = function () {

      var numbersArray=[]
      var usersArray=[]
      for (var property in contactsObject) {

          numbersArray.push(property);
          usersArray.push({phone_number:contactsObject[property].phoneNumber,nickname:contactsObject[property].name})

          // do stuff
      }
      UserService.Invite({users:usersArray}).then(function () {
        $scope.sms.number = numbersArray;
        $scope.sms.message = "da7le !!";
        if(window.cordova)
        {
          $scope.sendSms();
        }
        $state.go("friends");
      }, function (err) {
      })

    }
  });
})();


(function () {
  appControllers.controller('loginCtrl', function ($scope, $state,UserService, ConfigurationService) {
    $scope.auth = {

    };
    $scope.validPhone = false;
    $scope.validSms = false;
    $scope.title_arabic='??????';
    $scope.NotSendYet=true;
    $scope.send =function(){
      if($scope.validPhone == false && $scope.auth.phoneNumber && $scope.auth.phoneNumber.length == 10 && $scope.auth.phoneNumber.indexOf('05')>=0){
        UserService.AuthPhone($scope.auth.phoneNumber)
          .then(function (user) {
              NotSendYet=false;
            window.localStorage['user'] = angular.toJson(user);
            $scope.validPhone = true;
          }, function (err) {
          });
      }else if($scope.validPhone == true && $scope.validSms == false && $scope.auth.smsCode && $scope.auth.smsCode.length > 0){
        ConfigurationService.userDetails = null;
        var user = ConfigurationService.UserDetails();
        var confirm = {
          _id: user._id,
          activation_code: $scope.auth.smsCode
        }
        UserService.AuthConfirm(confirm)
          .then(function (user) {
            ConfigurationService.userDetails = null;
            window.localStorage['user'] = angular.toJson(user);
            $state.go("friends");
            // debugger
            // $scope.validSms = true;
          }, function (err) {
          });
      }
    }

    $scope.fbLogin = function () {
      console.log("fblogin")
      if (window.cordova) {
        UserService.FBlogin().then(function success(s) {
          window.localStorage['fbData'] = angular.toJson(s.authResponse);
          var fbData = s.authResponse;


          var user = ConfigurationService.UserDetails();
          var fb = {
            _id: user._id,
            fbToken: fbData['accessToken']
          }
          UserService.AuthFbLogin(fb)
            .then(function (user) {
              console.log("create")
              window.localStorage['user'] = angular.toJson(user);
              var ref = new Firebase("https://mustknow.firebaseIO.com");

              ref.authWithCustomToken(user.fireToken, function (error, authData) {

                if (error) {
                  console.log("Login Failed!", error);
                } else {
                  console.log("subjects")

                  $state.go("friends");
                }
              });
              $state.go("friends");
            }, function (err) {
              alert("error")
            });


        }, function error(msg) {
          console.log("Error while performing Facebook login", msg);
        })
      } else {
        var user = ConfigurationService.UserDetails();
        var fb = {
          _id: user._id,
          fbToken: 'EAAZAMbMtmoBIBADZC9D2PExZC9BErm1rAialUc1hZAiZAXK8MNDyocR4dw6nHueHnQ9MCulaJiRl1uJP9ZBHpR6awynlab2Y2hiZBkmFNNiRzzZCG54SlOdH9L0LOoA5tp6j5OOAYYY3ty5aB5ZBy6mNVXZBANY4jhTP97rqOWXu0mZCCMOOX37yRdJUT20LfYOb31eeo1EKT9MByYJ4o9YcF60'
        }
        UserService.AuthFbLogin(fb)
          .then(function (user) {
            console.log("create")
            window.localStorage['user'] = angular.toJson(user);
            var ref = new Firebase("https://mustknow.firebaseIO.com");

            ref.authWithCustomToken(user.fireToken, function (error, authData) {

              if (error) {
                console.log("Login Failed!", error);
              } else {
                console.log("subjects")

                $state.go("tab.subjects");
              }
            });
            $state.go("tab.subjects");
          }, function (err) {
            alert("error")
          });

      }

    };

  });
})();
// End of facebook login controller.

(function () {
  appControllers.controller('matchCtrl', function($scope, $cordovaContacts, MatchService){
    $scope.selectedPersons = {};
    $scope.mainPerson = {};
    $scope.otherPersons = []
    $scope.selectPerson = function(person, index){
      if(window.cordova){
        $cordovaContacts.pickContact().then(function (contact) {
          var flSplit =  contact.displayName.split(' ');

          if(flSplit .length > 0){
            var firstname = flSplit[0][0];
            var lastname = (flSplit.length >= 2) ? flSplit[1][0]: ""
            var fl = firstname + lastname;
            contact.fl = fl;
          }
          contact.phoneNumbers[0].value = contact.phoneNumbers[0].value.replace(/[\-]+/g, '');
          contact.index = index;
          if(person == 'mainPerson'){
            //alert(JSON.stringify(contact))
            $scope.mainPerson = {
              phone_number : contact.phoneNumbers[0].value,
              contactName: contact.displayName
            }
          }
          $scope.selectedPersons[person] = contact;

        });
      }else{
        if(person == 'mainPerson'){
          var contact = {
            displayName: "obaida abo elhija",
            name: {
              familyName: "abo elhija",
              givenName: "obaida"
            },
            phoneNumbers: [
              {
                id: "1234",
                value: "052-886-9555"
              }
            ]
          }
        }else{
          var contact = {
            displayName: "ahmed zedany",
            name: {
              familyName: "abo zedany",
              givenName: "ahmed"
            },
            phoneNumbers: [
              {
                id: "1234",
                value: "052-111-1111"
              }
            ]
          }
        }
        contact.phoneNumbers[0].value = contact.phoneNumbers[0].value.replace(/[\-]+/g, '');

        var flSplit =  contact.displayName.split(' ');

        if(flSplit .length > 0){
          var firstname = flSplit[0][0];
          var lastname = (flSplit.length >= 2) ? flSplit[1][0]: ""
          var fl = firstname + lastname;
          contact.fl = fl;
        }
        contact.index = index;
        if(person == 'mainPerson'){

          $scope.mainPerson = {
            phone_number : contact.phoneNumbers[0].value,
            contactName: contact.displayName
          }

        }
        $scope.selectedPersons[person] =contact;
        //if (!$scope.$$phase) $scope.$apply()
      }


    }
    $scope.match = function(){
      $scope.otherPersons = [];
      angular.forEach($scope.selectedPersons, function(value, key){
        if(value.index != 0){
          var otherP = {
            phone_number : value.phoneNumbers[0].value,
            contactName: value.displayName,
            index: value.index
          }
          $scope.otherPersons.push(otherP);
        }

      });
      $scope.otherPersons.sort(function(a,b){
        return a.index - b.index;
      });
      var match = {
        mainPerson: $scope.mainPerson,
        otherPersons: $scope.otherPersons
      }
      MatchService.Match(match).then(function(match){
          console.log(match);
          MatchService.SendMessageToMatcher(match);
      },
        function(err){

        }
      )
    }

  });
  appControllers.controller('subjectsCtrl', function ($scope, $cordovaContacts, MessagesService,$ionicScrollDelegate, $ionicModal, $ionicPlatform, $rootScope, $state, $interval, $stateParams, $timeout, SubjectService, EntityService, UserService, MessagesService, ConfigurationService, backcallFactory) {


    $scope.scrollOptions = {
      skip: 0,
      limit: 20
    }
    function removeChatSubjects(messages){
      $scope.messagesMap = {};
      angular.forEach(messages, function(message){
        var subjectId = message.conversationId.split('-')[1];
        $scope.messagesMap[subjectId] = true;
      })
      angular.forEach($scope.subjects, function(subject, key){
        if($scope.messagesMap[subject._id]){
          console.log("s");
          $scope.subjects.splice(1,key);
        }

      })
    }
    function loadSubjects(callback){
      SubjectService.GetSubjects(false, $scope.scrollOptions)
        .then(function (subjects) {
          var s = [];
          angular.forEach(subjects.subjects, function(subject){
           s.push(subject);
          })
          $scope.subjectsCount = subjects.count;
          callback(s);


        }, function (err) {
        });
    }

    $scope.loadOlderSubjects = function(){
      if($scope.subjects.length>0 ){
        $scope.scrollOptions.skip = $scope.subjects.length;
        $scope.scrollOptions.limit = 20;
      }

      loadSubjects(function(subjects){
        $scope.subjects = $scope.subjects.concat(subjects);
        $scope.$broadcast('scroll.infiniteScrollComplete');

      })


    }
    $scope.moreDataCanBeLoaded =function(){
      if($scope.subjects.length >= $scope.subjectsCount){
        return false;
      }
      return true;
    }
    $scope.loadNewrSubjects = function(){
      $scope.scrollOptions = {
        skip: 0,
        limit: 20
      }
      loadSubjects(function(subjects){
        $scope.subjects = [];
        $scope.subjects = $scope.subjects.concat(subjects);
        $scope.$broadcast('scroll.refreshComplete');
      })
    }
    $scope.subjects = [];
    SubjectService.GetCategories()
      .then(function (categories) {
      }, function (err) {
      });
    $ionicPlatform.ready(function () {
      //doRefresh();
      backcallFactory.backCall();
      if (window.cordova && typeof window.plugins.OneSignal != 'undefined' && !ConfigurationService.Notification_token()) {
        $timeout(function () {
          window.plugins.OneSignal.getIds(function (ids) {

            UserService.RegisterNotification(ids.userId)
              .then(function (userToken) {
                ConfigurationService.SetNotification_token(userToken);
              }, function (err) {
              });
          });
        }, 5000)
      }
      $scope.userDetails = ConfigurationService.UserDetails();
      if($scope.userDetails){
        var amOnline = new Firebase('https://mustknow.firebaseIO.com/.info/connected');
        var userRef = new Firebase('https://mustknow.firebaseIO.com/presence/' + $scope.userDetails._id);
        var conversationUserRef = new Firebase('https://mustknow.firebaseIO.com/conversationOnline/' + $scope.userDetails._id);
        amOnline.on('value', function(snapshot) {
          if (snapshot.val()) {
            userRef.onDisconnect().set('offline');
            conversationUserRef.onDisconnect().remove();
            userRef.set('online');
          }
        });
      }
    });

    $scope.checkUndreadMessage = function () {
      return MessagesService.checkUndreadMessage();
    }
    function doRefresh() {
      SubjectService.GetSubjects(false, $scope.scrollOptions)
        .then(function (subjects) {
          $scope.subjects = subjects.subjects;
          //MessagesService.setMessages();
          $scope.subjectsCount = subjects.count;
        }, function (err) {
        });
    }



    $scope.goToChat = function (subject) {

      var userName = subject.user.first_name + " " + subject.user.last_name;
      var messageDetails = {
        conversationId: subject.user._id + "-" + subject._id,
        userName: userName,
        subjectName: subject.title,
        fbPhotoUrl: subject.user.fbPhotoUrl,
        desc:subject.description
      }
      EntityService.setMessageDetails(messageDetails);
      $state.go('chat')
    }
    $scope.goToUserProfile = function (subject) {
      //
      //var userName = subject.user.first_name + " " + subject.user.last_name;
      //var messageDetails = {
      //  conversationId: subject.user._id + "-" + subject._id,
      //  userName: userName,
      //  subjectName: subject.title,
      //  fbPhotoUrl: subject.user.fbPhotoUrl
      //}
      //EntityService.setMessageDetails(messageDetails);
      $state.go('userProfile', {userId: subject.user._id, first_name: subject.user.first_name})
    }
    $scope.goToFilter = function () {

    }
    $scope.goToMessages = function () {
      $state.go('tab.messages');
    }
    $scope.goToAddSubject = function () {
      $state.go('addSubject');
    }

    $ionicModal.fromTemplateUrl('templates/match/html/select-contact.html', {
      scope: $scope,
      animation: 'slide-in-up'
    }).then(function(modal) {
      $scope.modal = modal;
    });

    $scope.$on('$destroy', function() {
      $scope.modal.remove();
      console.log("$destroy")
    });
    // Execute action on hide modal
    $scope.$on('modal.hidden', function() {
      console.log("modal hiden");
      $rootScope.myFilter.categories = [];
      $scope.scrollOptions = {
        skip: 0,
        limit: 20
      }
      SubjectService.GetCategories()
        .then(function (categories) {
          $scope.categories = categories;
          angular.forEach($scope.categories, function (value, key) {
            if (value.is_selected) {
              $rootScope.myFilter.categories.push(value._id)
            }
          });
          ConfigurationService.SetMyFilter($rootScope.myFilter);
          doRefresh();
        }, function (err) {
        });

    });
    // Execute action on remove modal
    $scope.$on('modal.removed', function() {
      console.log("removed");
    });
  })
  appControllers.controller('addSubjectCtrl', function ($scope, $ionicLoading, $state, SubjectService, $stateParams, $filter, $ionicHistory, ConfigurationService, $ionicHistory) {
    $scope.isExpanded = true;
    $scope.failed = false;

    $scope.subject = {};
    $scope.categories = [];
    // $scope.categoriesUrl = ConfigurationService.CategoriesUrl();
    $scope.initialForm = function () {

      $scope.subject = {
        title: '',
        user: ConfigurationService.UserDetails()._id,
        description: ''
      }
      SubjectService.GetCategories()
        .then(function (categories) {
          $scope.categories = categories;
        }, function (err) {
        });

    };
    $scope.createSubjectSetp = function (category) {
      $state.go('tab.addSubject-s2', {categoryId: category._id})
    }
    $scope.createSubject = function () {
      // if ($scope.subject.title.length <= 0 ||
       if($scope.subject.description.length <= 0) {
        $scope.failed = true;
        return;
      }
      $scope.subject.category = $state.params.categoryId;
      $ionicLoading.show();
      SubjectService.CreateSubject($scope.subject)
        .then(function () {
          $ionicLoading.hide();
          $ionicHistory.clearHistory();
          $state.go("tab.subjects");

        }, function (err) {
          $ionicLoading.hide();
        });
    }


    $scope.initialForm();
  });

})();

(function () {
appControllers.controller('messagesCtrl', function ($scope, $rootScope, $state, $stateParams, $timeout, $firebaseArray, ConfigurationService, MessagesService, UserService, EntityService) {

  $scope.$on('sendMessagesEvent', function(event, mass) {
    $scope.messages = MessagesService.getMessages();
    if(!$scope.$$phase) {
      $scope.$apply();
    }
  });
  MessagesService.setMessages();
  $scope.goToChat = function (message) {
    var messageDetails = {
      conversationId: message.conversationId,
      fbPhotoUrl: message.fbPhotoUrl,
      userName: message.userName,
      subjectName: message.subjectName,
      desc:message.desc
    }
    EntityService.setMessageDetails(messageDetails);
    $state.go('chat', {conversationId: message.conversationId})
  }

  $scope.goToUserProfile = function (message) {
    UserService.SetUserProfile(message);
    $state.go('userProfile')

  }
});
})();



(function () {
// Controller of expense dashboard page.
appControllers.controller('myProfileCtrl', function ($rootScope,$ionicModal, $ionicPopup,UserService, $firebaseArray, $ionicLoading, $scope,$state,$stateParams,$ionicHistory,EntityService,SubjectService,ConfigurationService) {

  $scope.isActive = false;
  $scope.activeButton = function() {
    $scope.isActive = !$scope.isActive;
  }

  $scope.userProfile = ConfigurationService.UserDetails();// angular.fromJson(window.localStorage['user']);
  // $scope.categoriesUrl = ConfigurationService.CategoriesUrl();
  // $scope.subjects = [];
  // $scope.deleteSubject = function (index, subject) {
  //   SubjectService.DeleteSubjects(subject)
  //     .then(function () {
  //       $scope.subjects.splice(index, 1);
  //     }, function (err) {
  //     });
  // }

  $scope.logOut = function(){
    UserService.LogOut()
      .then(function () {
        window.localStorage.clear();
        ConfigurationService.LogOut();
        $ionicHistory.clearHistory();
        $state.go('login');
      }, function (err) {
        $state.go('login');
      });
  }
    $scope.userProfile = ConfigurationService.UserDetails();// angular.fromJson(window.localStorage['user']);
    // // $scope.categoriesUrl = ConfigurationService.CategoriesUrl();
    // // $scope.subjects = [];
    // $ionicModal.fromTemplateUrl('templates/profile/html/editSubject.html', {
    //   scope: $scope,
    //   animation: 'slide-in-up'
    // }).then(function (modal) {
    //   $scope.modal = modal;
    // });
    // $scope.currentSubject = {};
    // $scope.currentSubjectIndex =5;
    // $scope.updateSubject = function () {
    //   if ($scope.currentSubject && $scope.currentSubject.description.length > 1) {
    //     SubjectService.UpdateSubject($scope.currentSubject)
    //       .then(function () {
    //         debugger
    //         $scope.subjects[ $scope.currentSubjectIndex]= $scope.currentSubject;
    //         $scope.modal.hide();
    //       }, function (err) {
    //         debugger
    //
    //       });
    //   }
    // };
    // $scope.deleteSubject = function (index, subject) {
    //
    //   SubjectService.DeleteSubjects(subject)
    //     .then(function () {
    //       $scope.subjects.splice(index, 1);
    //     }, function (err) {
    //     });
    // }
    // $scope.editSubject = function (subject, index) {
    //   $scope.currentSubjectIndex=index;
    //   $scope.currentSubject = subject;
    //   $scope.modal.show();
    // }
    // $scope.logOut = function () {
    //   UserService.LogOut()
    //     .then(function () {
    //       window.localStorage.clear();
    //       ConfigurationService.LogOut();
    //       $state.go('login');
    //     }, function (err) {
    //       $state.go('login');
    //     });
    // }
    //
    // $scope.tab = 'open';
    // $scope.updateProfile = function () {
    //   var user = {
    //     fbToken: $scope.userProfile.fbToken
    //   }
    //   UserService.CreateUser(user)
    //     .then(function (user) {
    //       window.localStorage['user'] = angular.toJson(user);
    //       $scope.userProfile = ConfigurationService.RefreshUserDetails();
    //     }, function (err) {
    //       console.log("Error ", err);
    //     });
    // }
    // $scope.getSubjects = function (title) {
    //   $scope.tab = title;
    //   $scope.subjects = [];
    //   $ionicLoading.show();
    //
    //   if (title == 'open') {
    //     SubjectService.GetMySubjects($scope.userProfile._id, true)
    //       .then(function (subjects) {
    //         $scope.subjects = subjects.subjects;
    //         $ionicLoading.hide();
    //       }, function (err) {
    //         $ionicLoading.hide();
    //       });
    //   } else if (title == 'closed') {
    //     SubjectService.GetMySubjects($scope.userProfile._id, false)
    //       .then(function (subjects) {
    //         $scope.subjects = subjects.subjects;
    //         $ionicLoading.hide();
    //       }, function (err) {
    //         $ionicLoading.hide();
    //       });
    //   } else if (title == 'blocked') {
    //     var blockedUsersRef = new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id + "/blocked/");
    //     $scope.blockedUsers = $firebaseArray(blockedUsersRef);
    //     $ionicLoading.hide();
    //   }
    // }
    // $scope.changeStatus = function (subject, index, status) {
    //   $scope.subjects.splice(index, 1);
    //   SubjectService.ChangeStatus(subject, status)
    //     .then(function (subjects) {
    //
    //     }, function (err) {
    //     });
    // }
    // $scope.getSubjects('open');

    // $scope.showConfirm = function (blockedUser) {
    //   var confirmPopup = $ionicPopup.confirm({
    //     title: 'Unblock User',
    //     template: 'Are you sure you want to remove' + blockedUser.userName + ' from your blocked users?'
    //   });
    //   confirmPopup.then(function (res) {
    //     if (res) {
    //       var blockedUserRef = new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id + "/blocked/" + blockedUser.userId);
    //       blockedUserRef.remove();
    //       console.log('You are sure');
    //     } else {
    //       console.log('You are not sure');
    //     }
    //   });
    // };
    $scope.userDetails = ConfigurationService.UserDetails();

  });

  appControllers.controller('userProfileCtrl', function ($rootScope, $scope, $state, $stateParams, EntityService, SubjectService, UserService) {
    $scope.isExpanded = true;
    $rootScope.isHeaderExpanded = false;
    $scope.userProfile = UserService.GetUserProfile();
    $scope.first_name = $scope.userProfile.first_name;

    $scope.a = function () {
      $state.go('app.subjects');
    }
    $scope.isAnimated = $stateParams.isAnimated;
    //$scope.userProfile = angular.fromJson(window.localStorage['user']);
    $scope.subjects = [];
    SubjectService.GetMySubjects($scope.userProfile.userId)
      .then(function (subjects) {
        $scope.subjects = subjects;
      }, function (err) {
      });


    $scope.goToSetting = function () {
      $state.go("app.expenseSetting");
    };

  });


  appControllers.controller('profileSettingCtrl', function ($scope, $state, $ionicHistory, $ionicViewSwitcher) {

    $scope.navigateTo = function (stateName, objectData) {
      if ($ionicHistory.currentStateName() != stateName) {
        $ionicHistory.nextViewOptions({
          disableAnimate: false,
          disableBack: true
        });

      //Next view animate will display in back direction
      $ionicViewSwitcher.nextDirection('back');

      $state.go(stateName, {
        isAnimated: objectData,
      });
    }
  }; // End of navigateTo.
}); // End of controller expense dashboard setting.
})();
